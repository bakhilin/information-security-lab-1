# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety pip-audit trivy

    - name: SAST - Bandit (Static Application Security Testing)
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
      continue-on-error: true  

    - name: SAST - Bandit Report
      if: always()
      run: |
        if [ -f bandit-report.json ]; then
          echo "Bandit Results:"
          cat bandit-report.json | jq '.results[] | "\(.filename):\(.line_number) - \(.issue_text)"' || true
        else
          echo "Bandit report not found"
        fi

    - name: SCA - Safety (Dependency Vulnerability Check)
      run: |
        safety check --json --output safety-report.json || true
      continue-on-error: true

    - name: SCA - Safety Report
      if: always()
      run: |
        if [ -f safety-report.json ]; then
          echo "Safety Results:"
          cat safety-report.json | jq '.vulnerabilities[] | "\(.package_name) \(.vulnerable_spec) - \(.advisory)"' || true
        else
          echo "Safety report not found"
        fi

    - name: SCA - pip-audit (Dependency Audit)
      run: |
        pip-audit --format json --output pip-audit-report.json || true
      continue-on-error: true

    - name: SCA - pip-audit Report
      if: always()
      run: |
        if [ -f pip-audit-report.json ]; then
          echo "pip-audit Results:"
          cat pip-audit-report.json | jq '.dependencies[] | select(.vulnerabilities != null) | "\(.name) - \(.vulnerabilities[].id)"' || true
        else
          echo "pip-audit report not found"
        fi

    - name: Container Security - Trivy (Docker Image Scan)
      run: |
        trivy config --severity HIGH,CRITICAL . > trivy-dockerfile-report.txt || true
        
        docker build -t flask-api-security-scan .
        trivy image --severity HIGH,CRITICAL --format json --output trivy-image-report.json flask-api-security-scan || true

    - name: Container Security Report
      if: always()
      run: |
        echo "Trivy Dockerfile Results:"
        cat trivy-dockerfile-report.txt || echo "No Dockerfile issues found"
        
        if [ -f trivy-image-report.json ]; then
          echo "Trivy Image Results:"
          cat trivy-image-report.json | jq '.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | "\(.PkgName): \(.VulnerabilityID) - \(.Severity)"' || true
        fi

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          *.json
          *.txt
        retention-days: 7

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install flake8 black isort

    - name: Linting - flake8
      run: |
        flake8 app/ --max-line-length=120 --show-source --statistics

    - name: Code Formatting - Black
      run: |
        black --check app/ --line-length=120

    - name: Import Sorting - isort
      run: |
        isort --check-only app/
